package com.color_analysis_in_xinjiangtimes.push;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table PUSH_MESSAGE.
 */
public class PushMessageDao extends AbstractDao<PushMessage, Long> {

    public static final String TABLENAME = "PUSH_MESSAGE";

    /**
     * Properties of entity PushMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AlertMessage = new Property(1, String.class, "alertMessage", false, "ALERT_MESSAGE");
        public final static Property UserId = new Property(2, String.class, "memberId", false, "MEMBER_ID");
        public final static Property Sound = new Property(3, String.class, "sound", false, "SOUND");
        public final static Property MessageType = new Property(4, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property IsRead = new Property(5, Boolean.class, "isRead", false, "IS_READ");
        public final static Property MessageTime = new Property(6, String.class, "messageTime", false, "MESSAGE_TIME");
        public final static Property MoreId = new Property(7, long.class, "moreId", false, "MORE_ID");
    }

    ;

    private DaoSession daoSession;

    private Query<PushMessage> more_MessagesQuery;

    public PushMessageDao(DaoConfig config) {
        super(config);
    }

    public PushMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'PUSH_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ALERT_MESSAGE' TEXT," + // 1: alertMessage
                "'MEMBER_ID' TEXT," + // 2: memberId
                "'SOUND' TEXT," + // 3: sound
                "'MESSAGE_TYPE' TEXT," + // 4: messageType
                "'IS_READ' INTEGER," + // 5: isRead
                "'MESSAGE_TIME' TEXT," + // 6: messageTime
                "'MORE_ID' INTEGER NOT NULL );"); // 7: moreId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PUSH_MESSAGE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, PushMessage entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String alertMessage = entity.getAlertMessage();
        if (alertMessage != null) {
            stmt.bindString(2, alertMessage);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }

        String sound = entity.getSound();
        if (sound != null) {
            stmt.bindString(4, sound);
        }

        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(5, messageType);
        }

        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(6, isRead ? 1l : 0l);
        }

        String messageTime = entity.getMessageTime();
        if (messageTime != null) {
            stmt.bindString(7, messageTime);
        }
        stmt.bindLong(8, entity.getMoreId());
    }

    @Override
    protected void attachEntity(PushMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public PushMessage readEntity(Cursor cursor, int offset) {
        PushMessage entity = new PushMessage( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alertMessage
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // memberId
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sound
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageType
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isRead
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messageTime
                cursor.getLong(offset + 7) // moreId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, PushMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlertMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSound(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsRead(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setMessageTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMoreId(cursor.getLong(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(PushMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(PushMessage entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "messages" to-many relationship of More.
     */
    public List<PushMessage> _queryMore_Messages(long moreId) {
        synchronized (this) {
            if (more_MessagesQuery == null) {
                QueryBuilder<PushMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MoreId.eq(null));
                more_MessagesQuery = queryBuilder.build();
            }
        }
        Query<PushMessage> query = more_MessagesQuery.forCurrentThread();
        query.setParameter(0, moreId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMoreDao().getAllColumns());
            builder.append(" FROM PUSH_MESSAGE T");
            builder.append(" LEFT JOIN MORE T0 ON T.'MORE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected PushMessage loadCurrentDeep(Cursor cursor, boolean lock) {
        PushMessage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        More more = loadCurrentOther(daoSession.getMoreDao(), cursor, offset);
        if (more != null) {
            entity.setMore(more);
        }

        return entity;
    }

    public PushMessage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<PushMessage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PushMessage> list = new ArrayList<PushMessage>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<PushMessage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }


    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<PushMessage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}
