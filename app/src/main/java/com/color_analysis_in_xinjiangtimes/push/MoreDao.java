package com.color_analysis_in_xinjiangtimes.push;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MORE.
*/
public class MoreDao extends AbstractDao<More, Long> {

    public static final String TABLENAME = "MORE";

    /**
     * Properties of entity More.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property OrderNum = new Property(4, String.class, "orderNum", false, "ORDER_NUM");
        public final static Property StartTime = new Property(5, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(6, String.class, "endTime", false, "END_TIME");
        public final static Property ActMony = new Property(7, String.class, "actMony", false, "ACT_MONY");
        public final static Property PayType = new Property(8, String.class, "payType", false, "PAY_TYPE");
    };

    private DaoSession daoSession;


    public MoreDao(DaoConfig config) {
        super(config);
    }
    
    public MoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MORE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'URL' TEXT," + // 1: url
                "'TIME' TEXT," + // 2: time
                "'CONTENT' TEXT," + // 3: content
                "'ORDER_NUM' TEXT," + // 4: orderNum
                "'START_TIME' TEXT," + // 5: startTime
                "'END_TIME' TEXT," + // 6: endTime
                "'ACT_MONY' TEXT," + // 7: actMony
                "'PAY_TYPE' TEXT);"); // 8: payType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, More entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindString(5, orderNum);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(6, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(7, endTime);
        }
 
        String actMony = entity.getActMony();
        if (actMony != null) {
            stmt.bindString(8, actMony);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(9, payType);
        }
    }

    @Override
    protected void attachEntity(More entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public More readEntity(Cursor cursor, int offset) {
        More entity = new More( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // actMony
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // payType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, More entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setActMony(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPayType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(More entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(More entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
